
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.PosteScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  description: 'description'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  prenom: 'prenom',
  email: 'email',
  posteId: 'posteId',
  telephone: 'telephone',
  adresse: 'adresse',
  role: 'role',
  dateEmbauche: 'dateEmbauche',
  dateFin: 'dateFin'
};

exports.Prisma.EmployeePermissionScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  permission: 'permission'
};

exports.Prisma.SyntheseHeuresScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  periodeFrom: 'periodeFrom',
  periodeTo: 'periodeTo',
  heuresNormales: 'heuresNormales',
  heuresSupplementaires: 'heuresSupplementaires',
  statut: 'statut',
  planningId: 'planningId'
};

exports.Prisma.PlanningScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  createurId: 'createurId',
  dateCreation: 'dateCreation',
  dateRangeId: 'dateRangeId',
  statut: 'statut'
};

exports.Prisma.CreneauScalarFieldEnum = {
  id: 'id',
  dateDebut: 'dateDebut',
  dateFin: 'dateFin',
  type: 'type',
  employeeId: 'employeeId',
  valide: 'valide',
  statutTache: 'statutTache',
  duree: 'duree',
  commentaire: 'commentaire',
  tacheId: 'tacheId',
  planningId: 'planningId'
};

exports.Prisma.TacheScalarFieldEnum = {
  id: 'id',
  label: 'label',
  description: 'description',
  dateLimite: 'dateLimite',
  statut: 'statut',
  dateCompletion: 'dateCompletion',
  employeeId: 'employeeId'
};

exports.Prisma.DateRangeScalarFieldEnum = {
  id: 'id',
  debut: 'debut',
  fin: 'fin'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  destinataireId: 'destinataireId',
  message: 'message',
  date: 'date',
  statut: 'statut'
};

exports.Prisma.RapportScalarFieldEnum = {
  id: 'id',
  employeId: 'employeId',
  createurId: 'createurId',
  dateCreation: 'dateCreation',
  type: 'type',
  statut: 'statut'
};

exports.Prisma.CongeScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  type: 'type',
  dateDebut: 'dateDebut',
  dateFin: 'dateFin',
  statut: 'statut'
};

exports.Prisma.DisponibiliteScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  jour: 'jour',
  heureDebut: 'heureDebut',
  heureFin: 'heureFin'
};

exports.Prisma.ContratScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  type: 'type',
  dateDebut: 'dateDebut',
  dateFin: 'dateFin'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.EnumRole = exports.$Enums.EnumRole = {
  EMPLOYE_BASE: 'EMPLOYE_BASE',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN'
};

exports.EnumPermission = exports.$Enums.EnumPermission = {
  PLANNING_READ: 'PLANNING_READ',
  PLANNING_CREATE: 'PLANNING_CREATE',
  PLANNING_UPDATE: 'PLANNING_UPDATE',
  PLANNING_DELETE: 'PLANNING_DELETE',
  PLANNING_PUBLISH: 'PLANNING_PUBLISH',
  PLANNING_OVERRIDE: 'PLANNING_OVERRIDE',
  LEAVE_REQUEST: 'LEAVE_REQUEST',
  LEAVE_APPROVE: 'LEAVE_APPROVE',
  LEAVE_MANAGE_TYPES: 'LEAVE_MANAGE_TYPES',
  LEAVE_VIEW_TEAM: 'LEAVE_VIEW_TEAM',
  EMPLOYEE_READ: 'EMPLOYEE_READ',
  EMPLOYEE_EDIT: 'EMPLOYEE_EDIT',
  EMPLOYEE_MANAGE_CONTRACTS: 'EMPLOYEE_MANAGE_CONTRACTS',
  EMPLOYEE_MANAGE_SKILLS: 'EMPLOYEE_MANAGE_SKILLS',
  TEAM_ASSIGN: 'TEAM_ASSIGN',
  TEAM_MANAGE: 'TEAM_MANAGE',
  TEAM_VIEW_STATS: 'TEAM_VIEW_STATS',
  CONFIG_UPDATE: 'CONFIG_UPDATE',
  ROLE_MANAGE: 'ROLE_MANAGE',
  PERMISSION_MANAGE: 'PERMISSION_MANAGE',
  SYSTEM_BACKUP: 'SYSTEM_BACKUP',
  ALL_ACCESS: 'ALL_ACCESS'
};

exports.StatutValidation = exports.$Enums.StatutValidation = {
  BROUILLON: 'BROUILLON',
  VALIDE: 'VALIDE',
  REJETE: 'REJETE',
  ANNULE: 'ANNULE'
};

exports.TypeCreneau = exports.$Enums.TypeCreneau = {
  TRAVAIL: 'TRAVAIL',
  FORMATION: 'FORMATION',
  REUNION: 'REUNION'
};

exports.EnumStatutTache = exports.$Enums.EnumStatutTache = {
  A_FAIRE: 'A_FAIRE',
  EN_COURS: 'EN_COURS',
  TERMINEE: 'TERMINEE',
  VALIDEE: 'VALIDEE',
  ANNULEE: 'ANNULEE'
};

exports.StatutNotification = exports.$Enums.StatutNotification = {
  ENVOYEE: 'ENVOYEE',
  LUE: 'LUE',
  ARCHIVEE: 'ARCHIVEE'
};

exports.TypeConge = exports.$Enums.TypeConge = {
  ANNUEL: 'ANNUEL',
  MALADIE: 'MALADIE',
  PARENTAL: 'PARENTAL',
  SANS_SOLDE: 'SANS_SOLDE'
};

exports.StatutDemande = exports.$Enums.StatutDemande = {
  EN_ATTENTE: 'EN_ATTENTE',
  VALIDE: 'VALIDE',
  REJETEE: 'REJETEE',
  ANNULEE: 'ANNULEE'
};

exports.EnumJour = exports.$Enums.EnumJour = {
  LUNDI: 'LUNDI',
  MARDI: 'MARDI',
  MERCREDI: 'MERCREDI',
  JEUDI: 'JEUDI',
  VENDREDI: 'VENDREDI',
  SAMEDI: 'SAMEDI',
  DIMANCHE: 'DIMANCHE'
};

exports.EnumContrat = exports.$Enums.EnumContrat = {
  CDI: 'CDI',
  CDD: 'CDD',
  INTERIM: 'INTERIM'
};

exports.Prisma.ModelName = {
  Poste: 'Poste',
  Employee: 'Employee',
  EmployeePermission: 'EmployeePermission',
  SyntheseHeures: 'SyntheseHeures',
  Planning: 'Planning',
  Creneau: 'Creneau',
  Tache: 'Tache',
  DateRange: 'DateRange',
  Notification: 'Notification',
  Rapport: 'Rapport',
  Conge: 'Conge',
  Disponibilite: 'Disponibilite',
  Contrat: 'Contrat'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
